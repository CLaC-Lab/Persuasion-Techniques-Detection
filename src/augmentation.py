"""DATA_new_aug.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U-6QmXnRoj2bAR41sYUu4w93uEt5_kXD
"""


import os
import pandas as pd

from googletrans import Translator

from labels import LABEL_COLUMNS

translator = Translator()

LANGS = ['en', 'fr', 'ge', 'it', 'po', 'ru']
column_count_to_augment = [500, 300, 200, 250, 100, 100]
column_count_to_drop = [500, 800, 750, 300, 200, 200]


def load_lang_dfs():
  paths = [os.path.join("..", "semeval2023task3bundle-v4", f"train_df_{lang}.csv") for lang in LANGS]
  return [pd.read_csv(file) for file in paths]

def augment(curr_lang, under_rep_min_threshold):

  lang_dfs = load_lang_dfs()

  curr_df = [lang_df for lang, lang_df in zip(LANGS, lang_dfs) if lang == curr_lang][0]
  other_lang_dfs = [lang_df for lang, lang_df in zip(LANGS, lang_dfs) if lang != curr_lang]

  cols_to_aug = [col for col in LABEL_COLUMNS if curr_df[col].sum() < under_rep_min_threshold]

  new_df = curr_df.copy()
  print('TEXT', new_df.iloc[0].text)
  target_lang_to_trans = translator.detect(new_df.iloc[0].text).lang

  for other_lang_df in other_lang_dfs:

    other_lang_df_under_reps_only = other_lang_df[(other_lang_df[cols_to_aug] == 1).any(axis=1)]

    print('translating', other_lang_df_under_reps_only.iloc[0]['text'], "to", target_lang_to_trans)
    other_lang_df_under_reps_only['text'] = other_lang_df_under_reps_only['text'].apply(lambda x: translator.translate(x, dest=target_lang_to_trans).text)

    print('adding', len(other_lang_df_under_reps_only), "from", other_lang_df_under_reps_only.iloc[0]['text'])
    new_df = pd.concat([new_df, other_lang_df_under_reps_only])
    print(f'{curr_lang} df, new length', len(new_df))

  print(f"{curr_lang} augmented")
  return new_df

def drop_over_rep_single_non_occurring(df_to_under_sample, over_rep_threshold):
  over_represented_columns = [column for column in LABEL_COLUMNS if df_to_under_sample[column].sum() > over_rep_threshold]
  under_df = df_to_under_sample[~((df_to_under_sample[over_represented_columns] == 1).any(1) & (df_to_under_sample[LABEL_COLUMNS].apply(lambda x: sum(x), axis=1) == 1))]
  return under_df

def print_distribution(df, lang_to_aug = ""):
  df[LABEL_COLUMNS].sum().sort_values().plot(kind="barh", title=lang_to_aug)


def main():
  for lang_to_augment, lang_column_count_to_augment, lang_column_count_to_drop in zip(LANGS, column_count_to_augment, column_count_to_drop):
    augmented_df = augment(lang_to_augment, lang_column_count_to_augment)
    df = drop_over_rep_single_non_occurring(augmented_df, lang_column_count_to_drop)

    output_file = os.path.join("..", "semeval2023task3bundle-v4", f"train_df_aug_{lang_to_augment}.csv")
    df.to_csv(output_file, index=False)


if __name__ == "__main__":
   main()